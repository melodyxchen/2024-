
"""
This module handles parsing of financial and insurance documents using the LlamaParse API.
The documents are parsed and the results are saved as .txt files in specified directories.

Functions:
    getFilePathList: Collects file paths from a specified directory.
    parseDocs: Parses documents based on file paths using LlamaParse.
"""

# Imports
import argparse
import nest_asyncio
import os
from llama_parse import LlamaParse

# Apply nested asyncio to avoid event loop issues
nest_asyncio.apply()

# Set environment variables, the api key can be generated by signing in LlamaCloud
os.environ["LLAMA_CLOUD_API_KEY"] = "llx-..."

# Initialize parser
pdfParser = LlamaParse(
    result_type="markdown",  # "markdown" and "text" are available
    num_workers=4,  # if multiple files passed, split in `num_workers` API calls
    verbose=True,
    language="ch_tra",  # Optionally you can define a language, default=en
)


def getFilePathList(Direc):
    """
    Collects file paths from the specified directory.
    Args:
        Direc (str): Path to the directory containing documents to process.
    Returns:
        list: A list of file paths for files in the directory.
    """
    ref_path = []
    files = os.listdir(Direc)
    for f in files:
        if os.path.isfile(Direc + '/' + f):
            ref_path.append(Direc + '/' + f)
    return ref_path


def parseDocs(pathList):
    """
    Parses documents using LlamaParse based on file paths.
    Args:
        pathList (list): List of file paths to be parsed.
    Returns:
        list: A list of parsed document data.
    """

    extra_info_dict = [{"file_name": path.split('/')[-1]} for path in pathList] # add metadata
    DOCS = []

    for i, path in enumerate(pathList):
        documents = pdfParser.load_data(path, extra_info=extra_info_dict[i])
        DOCS.append(documents)
    return DOCS


if __name__ == "__main__":
    # 使用argparse解析命令列參數
    parser = argparse.ArgumentParser(description='Process some paths and files.')
    parser.add_argument('--finance_source_path', type=str, help='讀取 finance 參考資料路徑', default='競賽資料集/reference/finance')
    parser.add_argument('--finance_output_path', type=str, help='儲存 insurance 提取出的文字檔檔案夾路徑', default='processed_data/all_fin')  # 答案輸出的路徑
    parser.add_argument('--insurance_source_path', type=str, help='讀取 insurance 參考資料路徑', default='競賽資料集/reference/insurance')
    parser.add_argument('--insurance_output_path', type=str, help='儲存 insurance 提取出的文字檔檔案夾路徑', default='processed_data/all_fin')  # 答案輸出的路徑

    args = parser.parse_args()  # 解析參數

    # Get files (paths) for financial and insurance references
    finance_ref_path = getFilePathList(args.finance_source_path)
    insurance_ref_path = getFilePathList(args.insurance_source_path)

    # Process financial documents
    DOCS_fin = parseDocs(finance_ref_path)
    # Save processed financial documents
    for i, doc in enumerate(DOCS_fin):
        if len(doc) == 0:
            print("Failed parsing fin_" + f"{i}") # Get the result from LlamaCloud platform 
            continue
        file_name = 'fin_' + str(doc[0].metadata['file_name'])
        for j in range(len(doc)):
            with open(args.finance_output_path + '/' + file_name[:-4] + '.txt', 'a', encoding='utf8') as f:
                f.write(doc[j].text)

    # Process insurance documents
    DOCS_ins = parseDocs(insurance_ref_path)
    # Save processed insurance documents
    for i, doc in enumerate(DOCS_ins):
        if len(doc) == 0:
            continue
        file_name = 'ins_' + str(doc[0].metadata['file_name'])
        for j in range(len(doc)):
            with open(args.insurance_output_path + '/' + file_name[:-4] + '.txt', 'a', encoding='utf8') as f:
                f.write(doc[j].text)